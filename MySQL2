@@ -16,13 +16,13 @@
 
 package uk.org.whoami.authme.datasource;
 
+import com.mysql.jdbc.jdbc2.optional.MysqlConnectionPoolDataSource;
 import java.sql.Connection;
-import java.sql.DriverManager;
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
-import java.sql.Timestamp;
+import java.util.Date;
 import java.util.HashMap;
 import uk.org.whoami.authme.ConsoleLogger;
 import uk.org.whoami.authme.cache.auth.PlayerAuth;
@@ -40,7 +40,7 @@
     private String columnPassword;
     private String columnIp;
     private String columnLastLogin;
-    private Connection con;
+    private MiniConnectionPoolManager conPool;
 
     public MySQLDataSource() throws ClassNotFoundException, SQLException {
         Settings s = Settings.getInstance();
@@ -63,23 +63,30 @@ public MySQLDataSource() throws ClassNotFoundException, SQLException {
     private synchronized void connect() throws ClassNotFoundException, SQLException {
         Class.forName("com.mysql.jdbc.Driver");
         ConsoleLogger.info("MySQL driver loaded");
-        con = DriverManager.getConnection("jdbc:mysql://" + host + ":" + port
-                + "/" + database, username, password);
-        ConsoleLogger.info("Connected to MySQL");
+        MysqlConnectionPoolDataSource dataSource = new MysqlConnectionPoolDataSource();
+        dataSource.setDatabaseName(database);
+        dataSource.setServerName(host);
+        dataSource.setPort(Integer.parseInt(port));
+        dataSource.setUser(username);
+        dataSource.setPassword(password);
+
+        conPool = new MiniConnectionPoolManager(dataSource, 10);
+        ConsoleLogger.info("Connection pool ready");
     }
 
     private synchronized void setup() throws SQLException {
-
+        Connection con = null;
         Statement st = null;
         ResultSet rs = null;
         try {
+            con = conPool.getConnection();
             st = con.createStatement();
             st.executeUpdate("CREATE TABLE IF NOT EXISTS " + tableName + " ("
                     + "id INTEGER AUTO_INCREMENT,"
                     + columnName + " VARCHAR(255) NOT NULL,"
                     + columnPassword + " VARCHAR(255) NOT NULL,"
                     + columnIp + " VARCHAR(40) NOT NULL,"
-                    + columnLastLogin + " TIMESTAMP,"
+                    + columnLastLogin + " BIGINT,"
                     + "CONSTRAINT table_const_prim PRIMARY KEY (id));");
 
             rs = con.getMetaData().getColumns(null, null, tableName, columnIp);
@@ -91,61 +98,55 @@ private synchronized void setup() throws SQLException {
             rs = con.getMetaData().getColumns(null, null, tableName, columnLastLogin);
             if (!rs.next()) {
                 st.executeUpdate("ALTER TABLE " + tableName + " ADD COLUMN "
-                        + columnLastLogin + " TIMESTAMP;");
+                        + columnLastLogin + " BIGINT;");
             }
 
         } finally {
-            if (st != null) {
-                try {
-                    st.close();
-                } catch (SQLException ex) {
-                }
-            }
-            if (rs != null) {
-                try {
-                    rs.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(rs);
+            close(st);
+            close(con);
         }
         ConsoleLogger.info("MySQL Setup finished");
     }
 
     @Override
     public synchronized boolean isAuthAvailable(String user) {
+        Connection con = null;
         PreparedStatement pst = null;
+        ResultSet rs = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("SELECT * FROM " + tableName + " WHERE "
                     + columnName + "=?;");
             pst.setString(1, user);
-            ResultSet rs = pst.executeQuery();
+            rs = pst.executeQuery();
             return rs.next();
         } catch (SQLException ex) {
             ConsoleLogger.showError(ex.getMessage());
             return false;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(rs);
+            close(pst);
+            close(con);
         }
     }
 
     @Override
     public synchronized PlayerAuth getAuth(String user) {
+        Connection con = null;
         PreparedStatement pst = null;
+        ResultSet rs = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("SELECT * FROM " + tableName + " WHERE "
                     + columnName + "=?;");
             pst.setString(1, user);
-            ResultSet rs = pst.executeQuery();
+            rs = pst.executeQuery();
             if (rs.next()) {
                 if (rs.getString(columnIp).isEmpty()) {
-                    return new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), "198.18.0.1", rs.getTimestamp(columnLastLogin));
+                    return new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), "198.18.0.1", new Date(rs.getLong(columnLastLogin)));
                 } else {
-                    return new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), rs.getString(columnIp), rs.getTimestamp(columnLastLogin));
+                    return new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), rs.getString(columnIp), new Date(rs.getLong(columnLastLogin)));
                 }
             } else {
                 return null;
@@ -154,43 +155,40 @@ public synchronized PlayerAuth getAuth(String user) {
             ConsoleLogger.showError(ex.getMessage());
             return null;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(rs);
+            close(pst);
+            close(con);
         }
     }
 
     @Override
     public synchronized boolean saveAuth(PlayerAuth auth) {
+        Connection con = null;
         PreparedStatement pst = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("INSERT INTO " + tableName + "(" + columnName + "," + columnPassword + "," + columnIp + "," + columnLastLogin + ") VALUES (?,?,?,?);");
             pst.setString(1, auth.getNickname());
             pst.setString(2, auth.getHash());
             pst.setString(3, auth.getIp());
-            pst.setTimestamp(4, new Timestamp(auth.getLastLogin().getTime()));
+            pst.setLong(4, auth.getLastLogin().getTime());
             pst.executeUpdate();
         } catch (SQLException ex) {
             ConsoleLogger.showError(ex.getMessage());
             return false;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(pst);
+            close(con);
         }
         return true;
     }
 
     @Override
     public synchronized boolean updatePassword(PlayerAuth auth) {
+        Connection con = null;
         PreparedStatement pst = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("UPDATE " + tableName + " SET " + columnPassword + "=? WHERE " + columnName + "=?;");
             pst.setString(1, auth.getHash());
             pst.setString(2, auth.getNickname());
@@ -199,100 +197,115 @@ public synchronized boolean updatePassword(PlayerAuth auth) {
             ConsoleLogger.showError(ex.getMessage());
             return false;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(pst);
+            close(con);
         }
         return true;
     }
 
     @Override
     public boolean updateLogin(PlayerAuth auth) {
+        Connection con = null;
         PreparedStatement pst = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("UPDATE " + tableName + " SET " + columnIp + "=?, " + columnLastLogin + "=? WHERE " + columnName + "=?;");
             pst.setString(1, auth.getIp());
-            pst.setTimestamp(2, new Timestamp(auth.getLastLogin().getTime()));
+            pst.setLong(2, auth.getLastLogin().getTime());
             pst.setString(3, auth.getNickname());
             pst.executeUpdate();
         } catch (SQLException ex) {
             ConsoleLogger.showError(ex.getMessage());
             return false;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(pst);
+            close(con);
         }
         return true;
     }
 
     @Override
     public synchronized boolean removeAuth(String user) {
+        Connection con = null;
         PreparedStatement pst = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("DELETE FROM " + tableName + " WHERE " + columnName + "=?;");
             pst.setString(1, user);
             pst.executeUpdate();
         } catch (SQLException ex) {
             ConsoleLogger.showError(ex.getMessage());
             return false;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(pst);
+            close(con);
         }
         return true;
     }
 
     @Override
     public synchronized HashMap<String, PlayerAuth> getAllRegisteredUsers() {
         HashMap<String, PlayerAuth> map = new HashMap<String, PlayerAuth>();
+        Connection con = null;
         PreparedStatement pst = null;
+        ResultSet rs = null;
         try {
+            con = conPool.getConnection();
             pst = con.prepareStatement("SELECT * FROM " + tableName + ";");
-            ResultSet rs = pst.executeQuery();
+            rs = pst.executeQuery();
             while (rs.next()) {
                 if (rs.getString(columnIp).isEmpty()) {
-                    map.put(rs.getString(columnName), new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), "198.18.0.1", rs.getTimestamp(columnLastLogin)));
+                    map.put(rs.getString(columnName), new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), "198.18.0.1", new Date(rs.getLong(columnLastLogin))));
                 } else {
-                    map.put(rs.getString(columnName), new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), rs.getString(columnIp), rs.getTimestamp(columnLastLogin)));
+                    map.put(rs.getString(columnName), new PlayerAuth(rs.getString(columnName), rs.getString(columnPassword), rs.getString(columnIp), new Date(rs.getLong(columnLastLogin))));
                 }
             }
         } catch (SQLException ex) {
             ConsoleLogger.showError(ex.getMessage());
             return map;
         } finally {
-            if (pst != null) {
-                try {
-                    pst.close();
-                } catch (SQLException ex) {
-                }
-            }
+            close(rs);
+            close(pst);
+            close(con);
         }
         return map;
     }
 
     @Override
     public synchronized void close() {
-        if (con != null) {
+    }
+
+    @Override
+    public void reload() {
+    }
+
+    private void close(Statement st) {
+        if (st != null) {
             try {
-                con.close();
+                st.close();
             } catch (SQLException ex) {
-                ConsoleLogger.showError("Couldn't close MySQL connection");
+                ConsoleLogger.showError(ex.getMessage());
             }
         }
     }
 
-    @Override
-    public void reload() {
+    private void close(ResultSet rs) {
+        if (rs != null) {
+            try {
+                rs.close();
+            } catch (SQLException ex) {
+                ConsoleLogger.showError(ex.getMessage());
+            }
+        }
+    }
+
+    private void close(Connection con) {
+        if (con != null) {
+            try {
+                con.close();
+            } catch (SQLException ex) {
+                ConsoleLogger.showError(ex.getMessage());
+            }
+        }
     }
 }
